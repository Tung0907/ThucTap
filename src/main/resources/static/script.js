// =================== CONFIG ===================
const API_BASE = "http://localhost:8080/api";
let currentUser = JSON.parse(localStorage.getItem("currentUser"));
let editId = null;
let currentPage = 0;
let totalPages = 0;
let filterStatus = "";
let sortBy = "createdAt";
let sortDir = "asc";

// =================== INIT ===================
document.addEventListener("DOMContentLoaded", () => {
    if (!currentUser) {
        window.location.href = "login.html";
        return;
    }

    if (currentUser.role === "ADMIN") {
        const userSection = document.getElementById("user-section");
        if (userSection) userSection.style.display = "block";
        loadUsers();
    }

    loadTasks();
    document.getElementById("addTaskBtn").addEventListener("click", saveTask);
});

// =================== AUTH HEADER ===================
function getAuthHeaders() {
    const token = localStorage.getItem("token");
    return {
        "Content-Type": "application/json",
        "Authorization": token ? `Bearer ${token}` : ""
    };
}

// =================== LOAD TASK (PH√ÇN TRANG, L·ªåC, S·∫ÆP X·∫æP) ===================
async function loadTasks(page = 0) {
    try {
        const query = new URLSearchParams({
            page,
            size: 5,
            status: filterStatus,
            sortBy,
            direction: sortDir
        });

        // ‚úÖ ƒê√£ s·ª≠a: g·ªçi ƒë√∫ng endpoint /paging
        const res = await fetch(`${API_BASE}/tasks/paging?${query}`, { headers: getAuthHeaders() });

        if (!res.ok) {
            if (res.status === 401 || res.status === 403) {
                alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥ng c√≥ quy·ªÅn.");
                logout();
                return;
            }
            throw new Error("L·ªói khi l·∫•y danh s√°ch task: " + res.status);
        }

        const result = await res.json();
        const pageData = result.data || result; // Ph√≤ng khi backend tr·∫£ tr·ª±c ti·∫øp Page<>
        renderTaskTable(pageData.content || []);
        renderPagination(pageData.totalPages || 0, pageData.number || 0);
    } catch (err) {
        console.error("L·ªói loadTasks:", err);
        alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch task. Xem console ƒë·ªÉ bi·∫øt chi ti·∫øt.");
    }
}

// =================== HI·ªÇN TH·ªä TASK TABLE ===================
function renderTaskTable(tasks) {
    const tbody = document.getElementById("taskTableBody");
    tbody.innerHTML = "";

    if (!tasks || tasks.length === 0) {
        tbody.innerHTML = `<tr><td colspan="8" style="text-align:center;">Kh√¥ng c√≥ d·ªØ li·ªáu</td></tr>`;
        return;
    }

    tasks.forEach(task => {
        const userLabel = task.userFullName || task.userName || "N/A";

        const tr = document.createElement("tr");
        tr.innerHTML = `
            <td>${task.id}</td>
            <td>${escapeHtml(task.title)}</td>
            <td>${escapeHtml(task.description)}</td>
            <td>${escapeHtml(task.status)}</td>
            <td>${escapeHtml(userLabel)}</td>
            <td>${task.createdAt ? new Date(task.createdAt).toLocaleString() : "-"}</td>
            <td>${task.deadline ? new Date(task.deadline).toLocaleDateString() : "-"}</td>
            <td>
                <button class="btn-edit" data-id="${task.id}">‚úèÔ∏è</button>
                <button class="btn-delete" data-id="${task.id}">üóëÔ∏è</button>
            </td>
        `;
        tbody.appendChild(tr);
    });

    document.querySelectorAll(".btn-edit").forEach(b =>
        b.addEventListener("click", e => editTask(e.target.dataset.id))
    );

    document.querySelectorAll(".btn-delete").forEach(b =>
        b.addEventListener("click", e => deleteTask(e.target.dataset.id))
    );
}

// =================== PH√ÇN TRANG ===================
function renderPagination(total, current) {
    totalPages = total;
    currentPage = current;
    const container = document.getElementById("pagination");
    container.innerHTML = "";

    for (let i = 0; i < total; i++) {
        const btn = document.createElement("button");
        btn.textContent = i + 1;
        btn.disabled = i === current;
        btn.onclick = () => loadTasks(i);
        container.appendChild(btn);
    }
}

// =================== L·ªåC & S·∫ÆP X·∫æP ===================
function applyFilter() {
    filterStatus = document.getElementById("filterStatus").value;
    sortBy = document.getElementById("sortBy").value;
    sortDir = document.getElementById("sortDir").value;
    loadTasks(0);
}

// =================== TH√äM / S·ª¨A TASK ===================
async function saveTask() {
    const title = document.getElementById("title").value.trim();
    const description = document.getElementById("description").value.trim();
    const status = document.getElementById("status").value;
    const deadline = document.getElementById("deadline").value;

    if (!title || !description) {
        alert("Vui l√≤ng nh·∫≠p ƒë·ªß ti√™u ƒë·ªÅ v√† m√¥ t·∫£!");
        return;
    }

    const payload = { title, description, status, deadline };
    const method = editId ? "PUT" : "POST";
    const url = editId ? `${API_BASE}/tasks/${editId}` : `${API_BASE}/tasks`;

    try {
        const res = await fetch(url, {
            method,
            headers: getAuthHeaders(),
            body: JSON.stringify(payload)
        });

        if (res.ok) {
            clearForm();
            loadTasks(currentPage);
            alert(editId ? "C·∫≠p nh·∫≠t Task th√†nh c√¥ng!" : "Th√™m Task m·ªõi th√†nh c√¥ng!");
        } else {
            const text = await res.text();
            console.error("L·ªói saveTask:", res.status, text);
            alert("Kh√¥ng th·ªÉ l∆∞u Task (m√£ l·ªói: " + res.status + ")");
        }
    } catch (err) {
        console.error("L·ªói saveTask:", err);
        alert("L·ªói khi l∆∞u Task. Xem console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.");
    }
}

// =================== CH·ªàNH S·ª¨A TASK ===================
async function editTask(id) {
    try {
        const res = await fetch(`${API_BASE}/tasks/${id}`, { headers: getAuthHeaders() });
        const result = await res.json();
        const task = result.data;

        document.getElementById("title").value = task.title || "";
        document.getElementById("description").value = task.description || "";
        document.getElementById("status").value = task.status || "PENDING";
        document.getElementById("deadline").value = task.deadline ? task.deadline.substring(0, 10) : "";

        editId = id;
        document.getElementById("addTaskBtn").textContent = "C·∫≠p nh·∫≠t Task";
    } catch (err) {
        console.error("L·ªói editTask:", err);
        alert("Kh√¥ng th·ªÉ t·∫£i Task ƒë·ªÉ ch·ªânh s·ª≠a.");
    }
}

// =================== X√ìA TASK ===================
async function deleteTask(id) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a Task n√†y?")) return;

    try {
        const res = await fetch(`${API_BASE}/tasks/${id}`, {
            method: "DELETE",
            headers: getAuthHeaders()
        });

        if (res.ok) loadTasks(currentPage);
        else alert("Kh√¥ng th·ªÉ x√≥a Task!");
    } catch (err) {
        console.error("L·ªói deleteTask:", err);
        alert("L·ªói khi x√≥a Task.");
    }
}

// =================== RESET FORM ===================
function clearForm() {
    document.getElementById("title").value = "";
    document.getElementById("description").value = "";
    document.getElementById("status").value = "PENDING";
    document.getElementById("deadline").value = "";
    editId = null;
    document.getElementById("addTaskBtn").textContent = "Th√™m Task";
}

// =================== QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG (ADMIN) ===================
async function loadUsers() {
    try {
        const res = await fetch(`${API_BASE}/users`, { headers: getAuthHeaders() });
        const users = await res.json();
        const tbody = document.querySelector("#userTable tbody");
        tbody.innerHTML = "";

        users.forEach(u => {
            const tr = document.createElement("tr");
            tr.innerHTML = `
                <td>${u.id}</td>
                <td>${escapeHtml(u.username || "")}</td>
                <td>${escapeHtml(u.fullName || "")}</td>
                <td>${escapeHtml(u.email || "")}</td>
                <td>${escapeHtml(u.role || "USER")}</td>
                <td>
                    <button class="btn-edit" onclick="editUser(${u.id})">‚úèÔ∏è</button>
                    <button class="btn-delete" onclick="deleteUser(${u.id})">üóëÔ∏è</button>
                </td>
            `;
            tbody.appendChild(tr);
        });
    } catch (err) {
        console.error("L·ªói loadUsers:", err);
    }
}

async function editUser(id) {
    const fullName = prompt("Nh·∫≠p h·ªç t√™n m·ªõi:");
    const email = prompt("Nh·∫≠p email m·ªõi:");
    const role = prompt("Nh·∫≠p vai tr√≤ (USER / ADMIN):");
    if (!fullName || !email || !role) return;

    await fetch(`${API_BASE}/users/${id}`, {
        method: "PUT",
        headers: getAuthHeaders(),
        body: JSON.stringify({ fullName, email, role })
    });
    loadUsers();
}

async function deleteUser(id) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?")) return;
    await fetch(`${API_BASE}/users/${id}`, { method: "DELETE", headers: getAuthHeaders() });
    loadUsers();
}

// =================== ƒêƒÇNG XU·∫§T ===================
function logout() {
    localStorage.removeItem("token");
    localStorage.removeItem("currentUser");
    window.location.href = "login.html";
}

// =================== ESCAPE HTML ===================
function escapeHtml(text) {
    if (!text && text !== 0) return "";
    return String(text).replace(/[&<>"']/g, c => ({
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
    }[c]));
}
